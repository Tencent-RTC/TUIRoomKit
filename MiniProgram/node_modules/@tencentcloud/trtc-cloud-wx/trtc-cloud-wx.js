'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var EventEmitter = require('eventemitter3');
var TRTC = require('trtc-wx-sdk');

function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

exports.TRTCAppScene = void 0;
(function (TRTCAppScene) {
  // web
  // TRTCAppSceneVideoCall = 0,
  // TRTCAppSceneLIVE = 1,
  // TRTCAppSceneAudioCall = 2,
  // TRTCAppSceneVoiceChatRoom = 3,
  // miniprogram
  // TRTCAppSceneVideoCall = 'videocall',
  // TRTCAppSceneLIVE = 'live',
  // TRTCAppSceneAudioCall = 'audiocall',
  // TRTCAppSceneVoiceChatRoom = 'voicechatroom',
  TRTCAppScene[TRTCAppScene["TRTCAppSceneVideoCall"] = 0] = "TRTCAppSceneVideoCall";
  TRTCAppScene[TRTCAppScene["TRTCAppSceneLIVE"] = 1] = "TRTCAppSceneLIVE";
  TRTCAppScene[TRTCAppScene["TRTCAppSceneAudioCall"] = 2] = "TRTCAppSceneAudioCall";
  TRTCAppScene[TRTCAppScene["TRTCAppSceneVoiceChatRoom"] = 3] = "TRTCAppSceneVoiceChatRoom";
})(exports.TRTCAppScene || (exports.TRTCAppScene = {}));
exports.TRTCRoleType = void 0;
(function (TRTCRoleType) {
  TRTCRoleType[TRTCRoleType["TRTCRoleAnchor"] = 20] = "TRTCRoleAnchor";
  TRTCRoleType[TRTCRoleType["TRTCRoleAudience"] = 21] = "TRTCRoleAudience";
})(exports.TRTCRoleType || (exports.TRTCRoleType = {}));
exports.TRTCVideoStreamType = void 0;
(function (TRTCVideoStreamType) {
  TRTCVideoStreamType[TRTCVideoStreamType["TRTCVideoStreamTypeBig"] = 0] = "TRTCVideoStreamTypeBig";
  TRTCVideoStreamType[TRTCVideoStreamType["TRTCVideoStreamTypeSmall"] = 1] = "TRTCVideoStreamTypeSmall";
  TRTCVideoStreamType[TRTCVideoStreamType["TRTCVideoStreamTypeSub"] = 2] = "TRTCVideoStreamTypeSub";
})(exports.TRTCVideoStreamType || (exports.TRTCVideoStreamType = {}));
exports.TRTCVideoResolution = void 0;
(function (TRTCVideoResolution) {
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_120_120"] = 1] = "TRTCVideoResolution_120_120";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_160_160"] = 3] = "TRTCVideoResolution_160_160";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_270_270"] = 5] = "TRTCVideoResolution_270_270";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_480_480"] = 7] = "TRTCVideoResolution_480_480";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_160_120"] = 50] = "TRTCVideoResolution_160_120";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_240_180"] = 52] = "TRTCVideoResolution_240_180";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_280_210"] = 54] = "TRTCVideoResolution_280_210";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_320_240"] = 56] = "TRTCVideoResolution_320_240";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_400_300"] = 58] = "TRTCVideoResolution_400_300";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_480_360"] = 60] = "TRTCVideoResolution_480_360";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_640_480"] = 62] = "TRTCVideoResolution_640_480";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_960_720"] = 64] = "TRTCVideoResolution_960_720";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_160_90"] = 100] = "TRTCVideoResolution_160_90";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_256_144"] = 102] = "TRTCVideoResolution_256_144";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_320_180"] = 104] = "TRTCVideoResolution_320_180";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_480_270"] = 106] = "TRTCVideoResolution_480_270";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_640_360"] = 108] = "TRTCVideoResolution_640_360";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_960_540"] = 110] = "TRTCVideoResolution_960_540";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_1280_720"] = 112] = "TRTCVideoResolution_1280_720";
  TRTCVideoResolution[TRTCVideoResolution["TRTCVideoResolution_1920_1080"] = 114] = "TRTCVideoResolution_1920_1080";
})(exports.TRTCVideoResolution || (exports.TRTCVideoResolution = {}));
exports.TRTCVideoResolutionMode = void 0;
(function (TRTCVideoResolutionMode) {
  TRTCVideoResolutionMode[TRTCVideoResolutionMode["TRTCVideoResolutionModeLandscape"] = 0] = "TRTCVideoResolutionModeLandscape";
  TRTCVideoResolutionMode[TRTCVideoResolutionMode["TRTCVideoResolutionModePortrait"] = 1] = "TRTCVideoResolutionModePortrait";
})(exports.TRTCVideoResolutionMode || (exports.TRTCVideoResolutionMode = {}));
exports.TRTCVideoRotation = void 0;
(function (TRTCVideoRotation) {
  TRTCVideoRotation[TRTCVideoRotation["TRTCVideoRotation0"] = 0] = "TRTCVideoRotation0";
  TRTCVideoRotation[TRTCVideoRotation["TRTCVideoRotation90"] = 1] = "TRTCVideoRotation90";
  TRTCVideoRotation[TRTCVideoRotation["TRTCVideoRotation180"] = 2] = "TRTCVideoRotation180";
  TRTCVideoRotation[TRTCVideoRotation["TRTCVideoRotation270"] = 3] = "TRTCVideoRotation270";
})(exports.TRTCVideoRotation || (exports.TRTCVideoRotation = {}));
exports.TRTCVideoFillMode = void 0;
(function (TRTCVideoFillMode) {
  TRTCVideoFillMode[TRTCVideoFillMode["TRTCVideoFillMode_Fill"] = 0] = "TRTCVideoFillMode_Fill";
  TRTCVideoFillMode[TRTCVideoFillMode["TRTCVideoFillMode_Fit"] = 1] = "TRTCVideoFillMode_Fit";
})(exports.TRTCVideoFillMode || (exports.TRTCVideoFillMode = {}));
exports.TRTCVideoMirrorType = void 0;
(function (TRTCVideoMirrorType) {
  TRTCVideoMirrorType[TRTCVideoMirrorType["TRTCVideoMirrorType_Auto"] = 0] = "TRTCVideoMirrorType_Auto";
  TRTCVideoMirrorType[TRTCVideoMirrorType["TRTCVideoMirrorType_Enable"] = 1] = "TRTCVideoMirrorType_Enable";
  TRTCVideoMirrorType[TRTCVideoMirrorType["TRTCVideoMirrorType_Disable"] = 2] = "TRTCVideoMirrorType_Disable";
})(exports.TRTCVideoMirrorType || (exports.TRTCVideoMirrorType = {}));
exports.TRTCAudioQuality = void 0;
(function (TRTCAudioQuality) {
  TRTCAudioQuality[TRTCAudioQuality["TRTCAudioQualityDefault"] = 0] = "TRTCAudioQualityDefault";
  TRTCAudioQuality[TRTCAudioQuality["TRTCAudioQualitySpeech"] = 1] = "TRTCAudioQualitySpeech";
  TRTCAudioQuality[TRTCAudioQuality["TRTCAudioQualityMusic"] = 3] = "TRTCAudioQualityMusic";
})(exports.TRTCAudioQuality || (exports.TRTCAudioQuality = {}));
exports.TRTCBeautyStyle = void 0;
(function (TRTCBeautyStyle) {
  TRTCBeautyStyle[TRTCBeautyStyle["TRTCBeautyStyleSmooth"] = 0] = "TRTCBeautyStyleSmooth";
  TRTCBeautyStyle[TRTCBeautyStyle["TRTCBeautyStyleNature"] = 1] = "TRTCBeautyStyleNature";
})(exports.TRTCBeautyStyle || (exports.TRTCBeautyStyle = {}));

var _TRTCVideoResolutionM, _TRTCBeautyStyleMap, _TRTCVideoFillModeMap;
var translateTRTCAppScene = function translateTRTCAppScene(scene) {
  switch (scene) {
    case 0:
      return 'videocall';
    case 1:
      return 'live';
    case 2:
      return 'audiocall';
    case 3:
      return 'voicechatroom';
    default:
      return '';
  }
};
var translateTRTCVideoStreamType = function translateTRTCVideoStreamType(streamType) {
  switch (streamType) {
    case 0:
      return 'main';
    case 1:
      return 'small';
    case 2:
      return 'aux';
    default:
      return '';
  }
};
var translateTRTCStreamId = function translateTRTCStreamId(userId, streamType) {
  return "".concat(userId, "_").concat(translateTRTCVideoStreamType(streamType));
};
var TRTCVideoResolutionMap = (_TRTCVideoResolutionM = {}, _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_120_120, [120, 120]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_160_160, [160, 160]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_270_270, [270, 270]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_480_480, [480, 480]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_160_120, [160, 120]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_240_180, [240, 180]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_280_210, [280, 210]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_320_240, [320, 240]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_400_300, [400, 300]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_480_360, [480, 360]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_640_480, [640, 480]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_960_720, [960, 720]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_160_90, [160, 90]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_256_144, [256, 144]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_320_180, [320, 180]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_480_270, [480, 270]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_640_360, [640, 360]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_960_540, [960, 540]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_1280_720, [1280, 720]), _defineProperty(_TRTCVideoResolutionM, exports.TRTCVideoResolution.TRTCVideoResolution_1920_1080, [1920, 1080]), _TRTCVideoResolutionM);
var translateTRTCVideoResolution = function translateTRTCVideoResolution(resolution) {
  var _TRTCVideoResolutionM2 = _slicedToArray(TRTCVideoResolutionMap[resolution], 2),
    _TRTCVideoResolutionM3 = _TRTCVideoResolutionM2[0],
    videoWidth = _TRTCVideoResolutionM3 === void 0 ? 0 : _TRTCVideoResolutionM3,
    _TRTCVideoResolutionM4 = _TRTCVideoResolutionM2[1],
    videoHeight = _TRTCVideoResolutionM4 === void 0 ? 0 : _TRTCVideoResolutionM4;
  return {
    videoWidth: videoWidth,
    videoHeight: videoHeight
  };
};
var translateTRTCVideoResolutionMode = function translateTRTCVideoResolutionMode(resolutionMode) {
  switch (resolutionMode) {
    case exports.TRTCVideoResolutionMode.TRTCVideoResolutionModeLandscape:
      return 'horizontal';
    case exports.TRTCVideoResolutionMode.TRTCVideoResolutionModePortrait:
      return 'vertical';
    default:
      return '';
  }
};
var translateTRTCVideoRotation = function translateTRTCVideoRotation(rotation) {
  switch (rotation) {
    case exports.TRTCVideoRotation.TRTCVideoRotation0:
      return 'vertical';
    case exports.TRTCVideoRotation.TRTCVideoRotation90:
      return 'horizontal';
    default:
      return '';
  }
};
var translateTRTCVideoMirrorType = function translateTRTCVideoMirrorType(mirrorType) {
  switch (mirrorType) {
    case exports.TRTCVideoMirrorType.TRTCVideoMirrorType_Auto:
      return 'auto';
    case exports.TRTCVideoMirrorType.TRTCVideoMirrorType_Enable:
      return 'enable';
    case exports.TRTCVideoMirrorType.TRTCVideoMirrorType_Disable:
      return 'disable';
    default:
      return '';
  }
};
var TRTCBeautyStyleMap = (_TRTCBeautyStyleMap = {}, _defineProperty(_TRTCBeautyStyleMap, exports.TRTCBeautyStyle.TRTCBeautyStyleSmooth, 'smooth'), _defineProperty(_TRTCBeautyStyleMap, exports.TRTCBeautyStyle.TRTCBeautyStyleNature, 'nature'), _TRTCBeautyStyleMap);
var translateBeautyStyle = function translateBeautyStyle(beautyStyle) {
  return TRTCBeautyStyleMap[beautyStyle];
};
var TRTCVideoFillModeMap = (_TRTCVideoFillModeMap = {}, _defineProperty(_TRTCVideoFillModeMap, exports.TRTCVideoFillMode.TRTCVideoFillMode_Fill, 'fillCrop'), _defineProperty(_TRTCVideoFillModeMap, exports.TRTCVideoFillMode.TRTCVideoFillMode_Fit, 'contain'), _TRTCVideoFillModeMap);
var translateVideoFillMod = function translateVideoFillMod(videoFillMod) {
  return TRTCVideoFillModeMap[videoFillMod];
};

var uniqueFunc = function uniqueFunc(arr, uniId) {
  var res = new Map();
  return arr.filter(function (item) {
    return !res.has(item[uniId]) && res.set(item[uniId], 1);
  });
};
var isNumber = function isNumber(param) {
  return typeof param === 'number';
};
/**
 * 安全执行 JSON.parse
 * @param data
 * @returns
 */
function safelyParse(data) {
  if (typeof data !== 'string') {
    return data;
  }
  var result;
  try {
    var tempData = JSON.parse(data);
    // 规避 JSON.parse('12345') 转化为 12345 的情况
    if (_typeof(tempData) === 'object' && tempData) {
      result = tempData;
    } else {
      result = data;
    }
  } catch (error) {
    result = data;
  }
  return result;
}

var name = "@tencentcloud/trtc-cloud-wx";
var version = "0.0.4";
var description = "";
var main = "dist/trtc-cloud-wx.js";
var module$1 = "dist/trtc-cloud-wx.js";
var type = "module";
var scripts = {
	build: "npm run clear && rollup -c",
	dev: "node ./build/chokidar.js",
	clear: "node ./build/clear.js",
	copy: "node ./build/copy.js",
	doc: "npx typedoc --tsconfig typedoc.json",
	"doc:watch": "typedoc --watch",
	"doc:build": "jsdoc -c jsdoc.json"
};
var keywords = [
];
var author = "";
var license = "ISC";
var devDependencies = {
	"@babel/core": "^7.21.4",
	"@babel/preset-env": "^7.21.4",
	"@babel/preset-typescript": "^7.21.4",
	"@rollup/plugin-babel": "^6.0.3",
	"@rollup/plugin-json": "^6.0.0",
	"@rollup/plugin-terser": "^0.4.3",
	"@rollup/plugin-typescript": "^11.0.0",
	"@types/node": "^18.15.11",
	"@typescript-eslint/eslint-plugin": "^2.28.0",
	"@typescript-eslint/parser": "^2.28.0",
	"babel-loader": "^9.1.2",
	"better-docs": "^2.7.2",
	chokidar: "^3.5.3",
	"docdash-blue": "^1.1.9",
	eslint: "^5.14.1",
	"eslint-config-airbnb-base": "13.1.0",
	"eslint-loader": "^2.1.2",
	"eslint-plugin-import": "^2.27.5",
	"eslint-plugin-node": "^7.0.1",
	"eslint-plugin-promise": "^3.8.0",
	jsdoc: "^4.0.2",
	rollup: "^3.27.1",
	"rollup-plugin-uglify": "^6.0.4",
	taffydb: "^2.7.3",
	tslib: "^2.5.0",
	typedoc: "^0.24.4",
	"typedoc-theme-hierarchy": "^3.1.0",
	typescript: "^5.0.2"
};
var dependencies = {
	eventemitter3: "^5.0.0",
	"trtc-wx-sdk": "^1.1.5"
};
var packageJson = {
	name: name,
	version: version,
	description: description,
	main: main,
	module: module$1,
	type: type,
	scripts: scripts,
	keywords: keywords,
	author: author,
	license: license,
	devDependencies: devDependencies,
	dependencies: dependencies
};

/**
 * TRTCCloud
 * @interface
 */
var TRTCCloud = /*#__PURE__*/function () {
  // private handleAudioVolumeUpdate: (userVolumes: Array<TRTCVolumeInfo>) => void;
  function TRTCCloud() {
    _classCallCheck(this, TRTCCloud);
    this.version = packageJson.version;
    // 内部使用，用于调用接口时UI测监听，完成剩余逻辑
    this.InterfaceEventEmitter = new EventEmitter();
    // 外部使用，用户监听回调事件
    this.EventEmitter = new EventEmitter();
    this.role = exports.TRTCRoleType.TRTCRoleAnchor;
    this.userId = '';
    this.isEnterRoom = false;
    this.isMuted = false;
    this.isOpenCamera = false;
    this.audioVolumeEvaluation = 0;
    this.allTimer = {};
    this.renderMap = new Map();
    this.init();
  }
  /**
   * 获取 TRTCCloud 实例（单例模式）
   * @category Base
   */
  _createClass(TRTCCloud, [{
    key: "getSDKVersion",
    value: function getSDKVersion() {
      return this.version;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.EventEmitter.removeAllListeners();
      this.InterfaceEventEmitter.removeAllListeners();
      this.trtc.exitRoom();
    }
  }, {
    key: "init",
    value: function init() {
      this.trtc = new TRTC(this);
      this.TRTC_EVENT = this.trtc.EVENT;
      this.trtc.createPusher({});
      this.bindTRTCEvent();
      this.handleNetworkQuality = this.getHandleNetworkQuality(2000);
    }
  }, {
    key: "reset",
    value: function reset() {
      var _this = this;
      this.role = exports.TRTCRoleType.TRTCRoleAnchor;
      this.userId = '';
      this.isEnterRoom = false;
      this.isMuted = false;
      this.isOpenCamera = false;
      Object.keys(this.allTimer).forEach(function (key) {
        return clearInterval(_this.allTimer[key]);
      });
    }
  }, {
    key: "bindTRTCEvent",
    value: function bindTRTCEvent() {
      var _this2 = this;
      this.trtc.on(this.TRTC_EVENT.LOCAL_LEAVE, function (event) {
        // todo 第二个参数为进房耗时 此处调用start的时候处理
        // this.emit('onEnterRoom', 0)
      });
      this.trtc.on(this.TRTC_EVENT.ERROR, function (event) {
        var _event$data = event.data,
          code = _event$data.code,
          message = _event$data.message;
        _this2.emit('onError', code, message);
      });
      this.trtc.on(this.TRTC_EVENT.REMOTE_USER_JOIN, function (event) {
        var userID = event.data.userID;
        _this2.emit('onRemoteUserEnterRoom', userID);
      });
      // 远端用户退出
      this.trtc.on(this.TRTC_EVENT.REMOTE_USER_LEAVE, function (event) {
        var _event$data2 = event.data,
          userID = _event$data2.userID;
          _event$data2.playerList;
        _this2.emit('onRemoteUserLeaveRoom', userID, 0);
        _this2.InterfaceEventEmitter.emit('onRemoteUserLeaveRoom', userID, 0);
      });
      // 远端用户推送视频
      this.trtc.on(this.TRTC_EVENT.REMOTE_VIDEO_ADD, function (event) {
        var player = event.data.player;
        _this2.emit(player.streamType === 'aux' ? 'onUserSubStreamAvailable' : 'onUserVideoAvailable', player.userID, 1);
      });
      // 远端用户取消推送视频
      this.trtc.on(this.TRTC_EVENT.REMOTE_VIDEO_REMOVE, function (event) {
        var player = event.data.player;
        _this2.emit(player.streamType === 'aux' ? 'onUserSubStreamAvailable' : 'onUserVideoAvailable', player.userID, 0);
      });
      // 远端用户推送音频
      this.trtc.on(this.TRTC_EVENT.REMOTE_AUDIO_ADD, function (event) {
        var player = event.data.player;
        _this2.emit('onUserAudioAvailable', player.userID, 1);
        _this2.muteRemoteAudio(player.userID, false);
      });
      // 远端用户取消推送音频
      this.trtc.on(this.TRTC_EVENT.REMOTE_AUDIO_REMOVE, function (event) {
        var player = event.data.player;
        _this2.emit('onUserAudioAvailable', player.userID, 0);
      });
      this.trtc.on(this.TRTC_EVENT.REMOTE_AUDIO_VOLUME_UPDATE, function (event) {
        var playerList = event.data.playerList;
        var userVolumes = playerList.map(function (player) {
          return {
            userId: player.userID,
            volume: player.volume
          };
        });
        _this2.handleAudioVolumeUpdate(userVolumes);
      });
      this.trtc.on(this.TRTC_EVENT.LOCAL_AUDIO_VOLUME_UPDATE, function (event) {
        var pusher = event.data.pusher;
        var userVolumes = [{
          userId: pusher.userID,
          volume: pusher.volume
        }];
        _this2.handleAudioVolumeUpdate(userVolumes);
      });
      this.trtc.on(this.TRTC_EVENT.LOCAL_NET_STATE_UPDATE, function (event) {
        var pusher = event.data.pusher;
        _this2.handleNetworkQuality({
          pusher: pusher
        });
      });
      this.trtc.on(this.TRTC_EVENT.REMOTE_NET_STATE_UPDATE, function (event) {
        var playerList = event.data.playerList;
        _this2.handleNetworkQuality({
          playerList: playerList
        });
      });
    }
  }, {
    key: "getHandleAudioVolumeUpdate",
    value: function getHandleAudioVolumeUpdate(interval) {
      var _this3 = this;
      var _a;
      if ((_a = this.allTimer) === null || _a === void 0 ? void 0 : _a.AudioVolume) {
        clearInterval(this.allTimer.AudioVolume);
      }
      if (interval === 0) return function () {};
      var tempUserVolumes = [];
      var filterUselessItem = function filterUselessItem(userId) {
        tempUserVolumes = tempUserVolumes.filter(function (userVolume) {
          return userVolume.userId !== userId;
        });
      };
      this.InterfaceEventEmitter.off('onRemoteUserLeaveRoom'); // 防止重复监听
      this.InterfaceEventEmitter.on('onRemoteUserLeaveRoom', filterUselessItem, this.getHandleAudioVolumeUpdate);
      return function (userVolumes) {
        tempUserVolumes = uniqueFunc([].concat(_toConsumableArray(userVolumes), _toConsumableArray(tempUserVolumes)), 'userId');
        if (_this3.allTimer.AudioVolume) return;
        var timer = setInterval(function () {
          _this3.emit('onUserVoiceVolume', tempUserVolumes, tempUserVolumes.length, 0 // todo 此参数无用，暂时废弃
          );
        }, interval);
        _this3.allTimer.AudioVolume = timer;
      };
    }
  }, {
    key: "handleAudioVolumeUpdate",
    value: function handleAudioVolumeUpdate(userVolumes) {}
  }, {
    key: "getHandleNetworkQuality",
    value: function getHandleNetworkQuality(interval) {
      var _this4 = this;
      var _a;
      if ((_a = this.allTimer) === null || _a === void 0 ? void 0 : _a.networkQuality) {
        clearInterval(this.allTimer.networkQuality);
      }
      if (interval === 0) return function () {};
      var resultQuality = {
        localQuality: null,
        remoteQuality: []
      };
      this.on('onRemoteUserLeaveRoom', function (userId) {
        resultQuality.remoteQuality = resultQuality.remoteQuality.filter(function (quality) {
          return quality.userId !== userId;
        });
      }, this);
      return function (data) {
        var pusher = data.pusher,
          playerList = data.playerList;
        if (pusher) resultQuality.localQuality = {
          userId: pusher.userID,
          quality: pusher.netStatus
        };
        if (playerList) {
          resultQuality.remoteQuality = playerList.map(function (player) {
            return {
              userId: player.userID,
              quality: player.netStatus
            };
          });
        }
        if (_this4.allTimer.networkQuality) return;
        var timer = setInterval(function () {
          _this4.emit('onNetworkQuality', resultQuality.localQuality, resultQuality.remoteQuality);
        }, interval);
        _this4.allTimer.networkQuality = timer;
      };
    }
  }, {
    key: "handleNetworkQuality",
    value: function handleNetworkQuality(quality) {}
    /**
     * @category Base
     */
  }, {
    key: "on",
    value: function on(eventName, handler, context) {
      console.log('[TRTCCloud-WX:on]:', eventName);
      this.EventEmitter.on(eventName, handler, context);
    }
    /**
     * @category Base
     */
  }, {
    key: "off",
    value: function off(eventName, handler, context) {
      this.EventEmitter.off(eventName, handler, context);
    }
    /**
     * @category Base
     */
  }, {
    key: "emit",
    value: function emit(eventName) {
      var _this$EventEmitter;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      (_this$EventEmitter = this.EventEmitter).emit.apply(_this$EventEmitter, [eventName].concat(args));
    }
    /**
     * @category 房间
     */
  }, {
    key: "enterRoom",
    value: function enterRoom(params, scene) {
      var _this5 = this;
      var startTime = new Date().getTime();
      var sdkAppId = params.sdkAppId,
        userId = params.userId,
        userSig = params.userSig,
        roomId = params.roomId,
        strRoomId = params.strRoomId,
        role = params.role,
        privateMapKey = params.privateMapKey;
      this.userId = userId;
      this.trtc.createPusher({});
      var pusher = this.trtc.enterRoom({
        sdkAppID: sdkAppId,
        userID: userId,
        userSig: userSig,
        roomID: roomId,
        strRoomID: strRoomId,
        role: role,
        privateMapKey: privateMapKey,
        scene: translateTRTCAppScene(scene),
        enableMic: false,
        enableCamera: false,
        videoPreview: false
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher,
        callback: function callback() {
          _this5.trtc.getPusherInstance().start({
            success: function success() {
              _this5.scene = scene;
              _this5.isEnterRoom = true;
              var endTime = new Date().getTime();
              _this5.emit('onEnterRoom', endTime - startTime);
            },
            fail: function fail() {
              _this5.emit('onEnterRoom', -1);
            }
          });
        }
      });
    }
    /**
     * @category 房间
     */
  }, {
    key: "exitRoom",
    value: function exitRoom() {
      var _this6 = this;
      var _this$trtc$exitRoom = this.trtc.exitRoom(),
        pusher = _this$trtc$exitRoom.pusher;
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher,
        callback: function callback() {
          _this6.reset();
          _this6.emit('onExitRoom', 0);
        }
      });
    }
    /**
     * @category 房间
     */
  }, {
    key: "switchRoom",
    value: function switchRoom() {}
    /**
     * 切换角色，仅适用于直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）
     * @category 房间
     */
  }, {
    key: "switchRole",
    value: function switchRole(role) {
      var _this7 = this;
      var tempRole = this.role;
      this.role = role;
      if (tempRole === role || role === exports.TRTCRoleType.TRTCRoleAnchor) {
        this.emit('onSwitchRole', 0, '');
        return;
      }
      var pusher = this.trtc.setPusherAttributes({
        enableCamera: false,
        enableMic: false
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher,
        callback: function callback() {
          _this7.emit('onSwitchRole', 0, '');
        }
      });
    }
  }, {
    key: "connectOtherRoom",
    value: function connectOtherRoom() {}
  }, {
    key: "disconnectOtherRoom",
    value: function disconnectOtherRoom() {}
  }, {
    key: "setDefaultStreamRecvMode",
    value: function setDefaultStreamRecvMode() {}
    /**
     * 启动本地摄像头采集和预览
     * @category 视频
     */
  }, {
    key: "startLocalPreview",
    value: function startLocalPreview() {
      var _this8 = this;
      var frontCamera = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return new Promise(function (resolve, reject) {
        if (_this8.role !== exports.TRTCRoleType.TRTCRoleAnchor) {
          resolve(null);
          return;
        }
        var pusher = _this8.trtc.setPusherAttributes({
          videoPreview: _this8.isEnterRoom ? _this8.isMuted : true,
          enableCamera: _this8.isEnterRoom ? !_this8.isMuted : false,
          frontCamera: frontCamera ? 'front' : 'back'
        });
        _this8.InterfaceEventEmitter.emit('pusherAttributesChange', {
          pusher: pusher,
          callback: function callback() {
            return __awaiter(_this8, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    this.emit('onFirstVideoFrame', '', exports.TRTCVideoStreamType.TRTCVideoStreamTypeBig, pusher.videoWidth, pusher.videoHeight);
                    if (this.isEnterRoom) {
                      this.emit('onSendFirstLocalVideoFrame', exports.TRTCVideoStreamType.TRTCVideoStreamTypeBig);
                    }
                    resolve(null);
                    this.isOpenCamera = true;
                  case 4:
                  case "end":
                    return _context.stop();
                }
              }, _callee, this);
            }));
          }
        });
      });
    }
    /**
     * 停止本地摄像头采集和预览
     * @category 视频
     */
  }, {
    key: "stopLocalPreview",
    value: function stopLocalPreview() {
      var _this9 = this;
      var pusher = this.trtc.setPusherAttributes({
        videoPreview: false,
        enableCamera: false
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher,
        callback: function callback() {
          _this9.isOpenCamera = false;
          _this9.emit('onUserVideoAvailable', _this9.userId, 0);
        }
      });
    }
    /**
     * 修改本地摄像头预览的 HTML 元素，小程序不支持
     * @category 视频
     */
  }, {
    key: "updateLocalView",
    value: function updateLocalView(view) {
      if (view !== null) {
        this.startLocalPreview();
        return;
      }
      this.stopLocalPreview();
    }
    /**
     * 暂停/恢复发布本地的视频流
     * @category 视频
     * @param  {boolean} mute true：屏蔽；false：开启，默认值：false
     * @param {TRTCVideoStreamType} streamType 要暂停/恢复的视频流类型, 仅支持 TRTCVideoStreamTypeBig 和 TRTCVideoStreamTypeSub
     */
  }, {
    key: "muteLocalVideo",
    value: function muteLocalVideo(mute, streamType) {
      var _this10 = this;
      return new Promise(function (resolve, reject) {
        if (!_this10.isOpenCamera) {
          resolve(null);
          return;
        }
        var pusher = {};
        switch (streamType) {
          case exports.TRTCVideoStreamType.TRTCVideoStreamTypeBig:
          case exports.TRTCVideoStreamType.TRTCVideoStreamTypeSub:
            _this10.isMuted = mute;
            pusher = _this10.trtc.setPusherAttributes({
              videoPreview: mute,
              enableCamera: !mute
            });
            _this10.InterfaceEventEmitter.emit('pusherAttributesChange', {
              pusher: pusher,
              callback: function callback() {
                resolve(null);
              }
            });
            break;
          default:
            resolve(null);
        }
      });
    }
    /**
     * 开始显示远端视频画面
     * @category 视频
     * @param userId 对方的用户标识
     * @param view 此参数无效，小程序不支持
     * @param streamType 视频流类型
     */
  }, {
    key: "startRemoteView",
    value: function startRemoteView(userId, view, streamType) {
      var _this11 = this;
      var streamId = translateTRTCStreamId(userId, streamType);
      var playerAttributes = this.setTRTCPlayerAttributes(streamId, {
        muteVideo: false,
        stopVideo: false
      });
      this.renderMap.set(streamId, view);
      this.InterfaceEventEmitter.emit('playerAttributesChange', {
        streamId: streamId,
        view: this.renderMap.get(streamId),
        playerAttributes: playerAttributes,
        callback: function callback() {
          _this11.emit('onFirstVideoFrame', userId, streamType, 0, 0);
        }
      });
    }
    /**
     * 停止显示远端视频画面，同时不再拉取该远端用户的视频数据流
     * @param userId 对方的用户标识
     * @param streamType 视频流类型
     */
  }, {
    key: "stopRemoteView",
    value: function stopRemoteView(userId, streamType) {
      var streamId = translateTRTCStreamId(userId, streamType);
      var playerAttributes = this.setTRTCPlayerAttributes(streamId, {
        muteVideo: true,
        stopVideo: true
      });
      this.InterfaceEventEmitter.emit('playerAttributesChange', {
        streamId: streamId,
        view: this.renderMap.get(streamId),
        playerAttributes: playerAttributes
      });
    }
    /**
     * 修改远端视频渲染的 HTML 元素，小程序不支持
     * @param userId 远端视频流的用户 ID
     * @param view
     * 接受远端视频流渲染的 HTML 元素，传入 null 结束远端视频的渲染
     * - 传入的 HTML 元素必须时块元素，例如：div
     * @param streamType
     * @returns
     */
  }, {
    key: "updateRemoteView",
    value: function updateRemoteView(userId, view, streamType) {
      if (view !== null) {
        this.startRemoteView(userId, view, streamType);
        return;
      }
      this.stopRemoteView(userId, streamType);
    }
    // 停止显示所有远端视频画面，同时不再拉取该远端用户的视频数据流
  }, {
    key: "stopAllRemoteView",
    value: function stopAllRemoteView() {
      var _this12 = this;
      var playerList = this.trtc.getPlayerList();
      playerList.forEach(function (player) {
        var streamId = player.streamID;
        var playerAttributes = _this12.setTRTCPlayerAttributes(streamId, {
          muteVideo: true,
          stopVideo: true
        });
        _this12.InterfaceEventEmitter.emit('playerAttributesChange', {
          streamId: streamId,
          view: _this12.renderMap.get(streamId),
          playerAttributes: playerAttributes
        });
      });
    }
    // 暂停接收指定的远端视频流
    // 该接口仅停止接收远程用户的视频流，但并不释放显示资源，所以视频画面会冻屏在 mute 前的最后一帧。
  }, {
    key: "muteRemoteVideoStream",
    value: function muteRemoteVideoStream(userId, mute, streamType) {
      var streamId = translateTRTCStreamId(userId, streamType);
      var playerAttributes = this.setTRTCPlayerAttributes(streamId, {
        muteVideo: mute
      });
      this.InterfaceEventEmitter.emit('playerAttributesChange', {
        streamId: streamId,
        view: this.renderMap.get(streamId),
        playerAttributes: playerAttributes
      });
    }
  }, {
    key: "muteAllRemoteVideoStreams",
    value: function muteAllRemoteVideoStreams(mute) {
      var _this13 = this;
      var playerList = this.trtc.getPlayerList();
      playerList.forEach(function (player) {
        var streamId = player.streamID;
        var playerAttributes = _this13.setTRTCPlayerAttributes(streamId, {
          muteVideo: mute
        });
        _this13.InterfaceEventEmitter.emit('playerAttributesChange', {
          streamId: streamId,
          view: _this13.renderMap.get(streamId),
          playerAttributes: playerAttributes
        });
      });
    }
  }, {
    key: "setTRTCPlayerAttributes",
    value: function setTRTCPlayerAttributes(streamId, options) {
      this.trtc.setPlayerAttributes(streamId, options);
      var _this$trtc$getPlayerI = this.trtc.getPlayerInstance(streamId),
        playerAttributes = _this$trtc$getPlayerI.playerAttributes;
      return playerAttributes;
    }
  }, {
    key: "setVideoEncoderParam",
    value: function setVideoEncoderParam(params) {
      var videoResolution = params.videoResolution;
        params.resMode;
        var videoFps = params.videoFps;
        params.videoBitrate;
        var minVideoBitrate = params.minVideoBitrate;
      var _translateTRTCVideoRe = translateTRTCVideoResolution(videoResolution),
        videoWidth = _translateTRTCVideoRe.videoWidth,
        videoHeight = _translateTRTCVideoRe.videoHeight;
      // const videoOrientation = translateTRTCVideoResolutionMode(resMode);
      var pusher = this.trtc.setPusherAttributes({
        videoWidth: videoWidth,
        videoHeight: videoHeight,
        // videoOrientation,
        fps: videoFps,
        minBitrate: minVideoBitrate
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher
      });
    }
  }, {
    key: "setLocalRenderParams",
    value: function setLocalRenderParams(params) {
      var rotation = params.rotation;
        params.fillMode;
        var mirrorType = params.mirrorType;
      var videoOrientation = translateTRTCVideoRotation(rotation);
      var localMirror = translateTRTCVideoMirrorType(mirrorType);
      var pusher = this.trtc.setPusherAttributes({
        videoOrientation: videoOrientation,
        localMirror: localMirror
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher
      });
    }
    /**
     * 设置远端图像的渲染模式
     * @param {string} userId
     * @param {TRTCVideoStreamType} streamType
     * @param {TRTCRenderParams} params
     */
  }, {
    key: "setRemoteRenderParams",
    value: function setRemoteRenderParams(userId, streamType, params) {
      var fillMode = params.fillMode,
        rotation = params.rotation;
        params.mirrorType;
      var streamId = translateTRTCStreamId(userId, streamType); // 音频默认都是主流
      var playerAttributes = this.setTRTCPlayerAttributes(streamId, {
        objectFit: translateVideoFillMod(fillMode),
        orientation: translateTRTCVideoRotation(rotation)
      });
      this.InterfaceEventEmitter.emit('playerAttributesChange', {
        streamId: streamId,
        view: this.renderMap.get(streamId),
        playerAttributes: playerAttributes
      });
    }
  }, {
    key: "startLocalAudio",
    value: function startLocalAudio(quality) {
      var _this14 = this;
      var pusher = this.trtc.setPusherAttributes({
        enableMic: true
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher,
        callback: function callback() {
          _this14.emit('onMicDidReady');
          _this14.emit('onUserAudioAvailable', _this14.userId, 1);
          if (_this14.enterRoom) {
            _this14.emit('onSendFirstLocalAudioFrame');
          }
        }
      });
    }
  }, {
    key: "stopLocalAudio",
    value: function stopLocalAudio() {
      var _this15 = this;
      var pusher = this.trtc.setPusherAttributes({
        enableMic: false
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher,
        callback: function callback() {
          _this15.emit('onUserAudioAvailable', _this15.userId, 0);
        }
      });
    }
  }, {
    key: "muteLocalAudio",
    value: function muteLocalAudio(mute) {
      var _this16 = this;
      var pusher = this.trtc.setPusherAttributes({
        enableMic: !mute
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher,
        callback: function callback() {
          _this16.emit('onUserAudioAvailable', _this16.userId, mute === true ? 0 : 1);
        }
      });
    }
  }, {
    key: "muteRemoteAudio",
    value: function muteRemoteAudio(userId, mute) {
      var streamId = translateTRTCStreamId(userId, exports.TRTCVideoStreamType.TRTCVideoStreamTypeBig); // 音频默认都是主流
      var playerAttributes = this.setTRTCPlayerAttributes(streamId, {
        muteAudio: mute
      });
      this.InterfaceEventEmitter.emit('playerAttributesChange', {
        streamId: streamId,
        view: this.renderMap.get(streamId),
        playerAttributes: playerAttributes
      });
    }
  }, {
    key: "muteAllRemoteAudio",
    value: function muteAllRemoteAudio(mute) {
      var _this17 = this;
      var playerList = this.trtc.getPlayerList();
      playerList.forEach(function (player) {
        var streamId = player.streamID;
        var playerAttributes = _this17.setTRTCPlayerAttributes(streamId, {
          muteAudio: mute
        });
        _this17.InterfaceEventEmitter.emit('playerAttributesChange', {
          streamId: streamId,
          view: _this17.renderMap.get(streamId),
          playerAttributes: playerAttributes
        });
      });
    }
  }, {
    key: "enableAudioVolumeEvaluation",
    value: function enableAudioVolumeEvaluation(interval) {
      this.handleAudioVolumeUpdate = this.getHandleAudioVolumeUpdate(interval);
    }
    /**
     * 切换前后摄像头
     */
  }, {
    key: "switchCamera",
    value: function switchCamera(frontCamera) {
      var _this18 = this;
      var pusher = this.trtc.getPusherInstance();
      if (frontCamera === (pusher.pusherAttributes.frontCamera === 'front')) return Promise.resolve();
      return new Promise(function (resolve, reject) {
        wx.createLivePusherContext().switchCamera({
          success: function success(event) {
            var pusher = _this18.trtc.setPusherAttributes({
              frontCamera: true
            });
            _this18.InterfaceEventEmitter.emit('pusherAttributesChange', {
              pusher: pusher
            });
            resolve(event);
          },
          fail: function fail(error) {
            reject(error);
          }
        });
      });
    }
  }, {
    key: "setBeautyStyle",
    value: function setBeautyStyle(style, beauty, white, ruddiness) {
      var pusher = this.trtc.setPusherAttributes({
        beautyStyle: style,
        beautyLevel: beauty,
        whitenessLevel: white
      });
      this.InterfaceEventEmitter.emit('pusherAttributesChange', {
        pusher: pusher
      });
    }
  }, {
    key: "sendSEIMsg",
    value: function sendSEIMsg(msg) {
      return new Promise(function (resolve, reject) {
        wx.createLivePusherContext().sendMessage({
          msg: msg,
          success: function success(event) {
            resolve(event);
          },
          fail: function fail(error) {
            reject(error);
          }
        });
      });
    }
  }, {
    key: "startPlayMusic",
    value: function startPlayMusic(musicParam, callbackMap) {
      return new Promise(function (resolve, reject) {
        var path = musicParam.path,
          _musicParam$startTime = musicParam.startTimeMS,
          startTimeMS = _musicParam$startTime === void 0 ? 0 : _musicParam$startTime,
          _musicParam$endTimeMS = musicParam.endTimeMS,
          endTimeMS = _musicParam$endTimeMS === void 0 ? 0 : _musicParam$endTimeMS;
        wx.createLivePusherContext().playBGM({
          url: path,
          startTimeMs: startTimeMS,
          endTimeMs: endTimeMS,
          success: function success(event) {
            resolve(event);
          },
          fail: function fail(error) {
            reject(error);
          }
        });
      });
    }
  }, {
    key: "stopPlayMusic",
    value: function stopPlayMusic() {
      return new Promise(function (resolve, reject) {
        wx.createLivePusherContext().stopBGM({
          success: function success(event) {
            resolve(event);
          },
          fail: function fail(error) {
            reject(error);
          }
        });
      });
    }
  }, {
    key: "pausePlayMusic",
    value: function pausePlayMusic() {
      return new Promise(function (resolve, reject) {
        wx.createLivePusherContext().pauseBGM({
          success: function success(event) {
            resolve(event);
          },
          fail: function fail(error) {
            reject(error);
          }
        });
      });
    }
  }, {
    key: "resumePlayMusic",
    value: function resumePlayMusic() {
      return new Promise(function (resolve, reject) {
        wx.createLivePusherContext().resumeBGM({
          success: function success(event) {
            resolve(event);
          },
          fail: function fail(error) {
            reject(error);
          }
        });
      });
    }
    // 设置背景音乐的音量大小，播放背景音乐混音时使用，用来控制背景音音量大小
  }, {
    key: "setAllMusicVolume",
    value: function setAllMusicVolume(volume) {
      return new Promise(function (resolve, reject) {
        var volumeStr = (volume / 200).toString();
        wx.createLivePusherContext().setBGMVolume({
          volume: volumeStr,
          success: function success(event) {
            resolve(event);
          },
          fail: function fail(error) {
            reject(error);
          }
        });
      });
    }
    // 开启大小画面双路编码模式
  }, {
    key: "enableSmallVideoStream",
    value: function enableSmallVideoStream(enable, params) {
      // todo 待实现
    }
    /**
     * 调用实验性 API 接口
     *
     * 注意：该接口用于调用一些实验性功能, 目前 web 端空实现
     *
     * @param {String} jsonStr - 接口及参数描述的 JSON 字符串
     */
  }, {
    key: "callExperimentalAPI",
    value: function callExperimentalAPI(jsonStr) {
      var jsonObj = safelyParse(jsonStr);
      if (jsonObj === jsonStr) {
        return;
      }
      var api = jsonObj.api,
        params = jsonObj.params;
      if (!api || !params) {
        return;
      }
      switch (api) {
        case 'setFramework':
          this.handleSetFrameWork(params);
          break;
      }
    }
  }, {
    key: "handleSetFrameWork",
    value: function handleSetFrameWork(params) {
      var component = params.component;
      if (isNumber(component)) {
        try {
          if (wx) {
            wx.TUIScene = component;
            wx.setStorageSync('TUIScene', String(component));
          }
        } catch (err) {
          throw err;
        }
      }
    }
  }], [{
    key: "getTRTCShareInstance",
    value: function getTRTCShareInstance() {
      if (!TRTCCloud.instance) {
        TRTCCloud.instance = new TRTCCloud();
      }
      return TRTCCloud.instance;
    }
    /**
     * 销毁 TRTCCloud 实例（单例模式）
     * @category Base
     */
  }, {
    key: "destroyTRTCShareInstance",
    value: function destroyTRTCShareInstance() {
      if (!TRTCCloud.instance) return;
      TRTCCloud.instance.destroy();
      TRTCCloud.instance = null;
    }
  }]);
  return TRTCCloud;
}();

exports.TRTCCloud = TRTCCloud;
exports.default = TRTCCloud;
exports.translateBeautyStyle = translateBeautyStyle;
exports.translateTRTCAppScene = translateTRTCAppScene;
exports.translateTRTCStreamId = translateTRTCStreamId;
exports.translateTRTCVideoMirrorType = translateTRTCVideoMirrorType;
exports.translateTRTCVideoResolution = translateTRTCVideoResolution;
exports.translateTRTCVideoResolutionMode = translateTRTCVideoResolutionMode;
exports.translateTRTCVideoRotation = translateTRTCVideoRotation;
exports.translateTRTCVideoStreamType = translateTRTCVideoStreamType;
exports.translateVideoFillMod = translateVideoFillMod;
