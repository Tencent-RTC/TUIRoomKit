import TRTCCloud, {translateTRTCStreamId} from '@tencentcloud/trtc-cloud-wx'

const trtcCloud = TRTCCloud.getTRTCShareInstance()
const trtc = trtcCloud.trtc
const InterfaceEventEmitter = trtcCloud.InterfaceEventEmitter

Component({
  properties: {
    streamId: String
  },
  data: {
    player: {},
    TRTCStreamId: ''
  },
  lifetimes: {
    attached() {
      this.data.TRTCStreamId = this.getTRTCStreamId(this.data.streamId)
      this.bindTRTCCloudEvent()
    },
    detached() {
      this.unbindTRTCCloudEvent()
    }
  },

  methods: {
    // todo room uniapp 特供，因为 uniapp 打包导致组件传惨变量名更替 trtc-player 组建内部无法识别
    setTRTCStreamId(id) {
      return new Promise((resolve, reject) => {
        try {
          this.data.streamId = id
          this.data.TRTCStreamId = this.getTRTCStreamId(id)
          this.setData({streamId: this.data.streamId}, () => {
            resolve()
          })
        } catch (err) {
          reject(err)
        }
      })
    },
    playerAttributesChange(event) {
      const {view, playerAttributes, callback} = event
      if (view === this.data.streamId) {
        this.setData({player: playerAttributes}, callback)
      }
    },
    getTRTCStreamId(streamId) {
      const tempArray = streamId.split('_')
      const userId = tempArray.slice(0, -1).join('_')
      const streamType = Number(tempArray[tempArray.length - 1])
      return translateTRTCStreamId(userId, streamType)
    },
    bindTRTCCloudEvent() {
      InterfaceEventEmitter.on('playerAttributesChange', this.playerAttributesChange, this)
    },
    unbindTRTCCloudEvent() {
      InterfaceEventEmitter.off('playerAttributesChange', this.playerAttributesChange)
    },
    // 请保持跟 wxml 中绑定的事件名称一致
    _playerStateChange(event) {
      trtc.playerEventHandler(event)
    },
    _playerFullscreenChange(event) {
      trtc.playerFullscreenChange(event)
    },
    _playerNetStatus(event) {
      trtc.playerNetStatus(event)
    },
    _playerAudioVolumeNotify(event) {
      trtc.playerAudioVolumeNotify(event)
    },
  }
})
