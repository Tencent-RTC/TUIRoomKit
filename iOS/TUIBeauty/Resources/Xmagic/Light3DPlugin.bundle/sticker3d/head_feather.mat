material {
    name : head_feather_mix,
    shadingModel : unlit,
    depthWrite: true,
    depthCulling: false,
    parameters : [
        {
            type : sampler2d,
            name : color
        },
        {
            type : sampler2d,
            name : secondary
        },
        {
            type : float,
            name : sigma
        },
        {
            type : float,
            name : offsetX
        },
        {
            type : float,
            name : offsetY
        },
        {
            type : float,
            name : scale
        }
    ],
    requires: [
        uv0
    ],
}


fragment {


    const int kGaussianSampleCount = 9;
    const float kReinhardWeight = 5.0;


    vec3 Tonemap_ReinhardWeighted(const vec3 x, float weight) {
        // Weighted Reinhard tone-mapping operator designed for post-processing
        // This tone-mapping operator is invertible
        return x * (weight / (max3(x) + 1.0));
    }


    // 正态分布概率密度函数
    float normpdf(in float x, in float sigma) {
       return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        float2 uv = uvToRenderTargetUV(getUV0());
        vec4 primary = texture(materialParams_color, uv);
        vec4 second = texture(materialParams_secondary, uv);
        float sigma = materialParams.sigma;
        float offsetX = materialParams.offsetX;
        float offsetY = materialParams.offsetY;

        if (primary.a > 0.0 && second.a < 0.01) {
            //declare stuff
            const int mSize = 18;
            const int kSize = (mSize-1)/2;
            float kernel[mSize];
            vec4 final_color = vec4(0.0);
            float4 resolution = getResolution();
            float2 uv = uvToRenderTargetUV(getUV0());

            //create the 1-D kernel
            float Z = 0.0;
            for (int j = 0; j <= kSize; ++j) {
                kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);
            }


            //get the normalization factor (as the gaussian has been clamped)
            for (int j = 0; j < mSize; ++j) {
                Z += kernel[j];
            }


            float total_g = 0.0;
            float weight_g = 0.0;

            //read out the texels
            for (int i = -kSize; i <= kSize; ++i) {
                for (int j = 0; j <= kSize; ++j) {
                    float i_f = float(i);
                    float j_f = float(j);
                    vec2 st = vec2(uv.x+i_f/resolution.x*offsetX, uv.y+j_f/resolution.y*offsetY);
                    vec4 og = texture(materialParams_color, uv);
                    vec4 sColor = texture(materialParams_color, st);
                    float weight = kernel[kSize+j]*kernel[kSize+i];
                    if (sColor.a == 1.0) {
                        sColor.rgb = og.rgb;
                    } else {
                        sColor.rgb *= sColor.a;
                    }
                    total_g +=  weight;
                    final_color += sColor * weight;
                }
            }

            float4 result = final_color / total_g;
            material.baseColor = result;

        } else {
           material.baseColor = primary;
        }
    }
}