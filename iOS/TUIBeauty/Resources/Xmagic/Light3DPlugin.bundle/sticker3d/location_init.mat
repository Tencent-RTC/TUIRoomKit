// Simple unlit material that uses the colors associated with each vertex.
//
// This source material must be compiled to a binary material using the matc tool.
// The command used to compile this material is:
// matc -p mobile -a opengl -o app/src/main/assets/baked_color.filamat app/src/materials/baked_color.mat
//
// See build.gradle for an example of how to compile materials automatically
// Please refer to the documentation for more information about matc and the materials system.

material {
    name : location_init,
    shadingModel : unlit,
    requires : [uv0],
    depthCulling : false,
    flipUV: false,
    culling : none,
    parameters : [
        {
            type : sampler2d,
            name : texture
        },
        {
           type : mat4,
           name : mvpMatrix
        },
        {
            type : float,
            name : scale
        },
        {
            type : mat4,
            name : scaleTransform
        }
    ],
    variables : [
         pos
    ]
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        vec4 pos = materialParams.mvpMatrix * materialParams.scaleTransform * getPosition();
        material.pos = pos / pos.w;
        material.pos.x /= (getResolution().x * materialParams.scale);
        material.pos.y /= (getResolution().y * materialParams.scale);

        vec2 uv = material.uv0;
        uv = 2.0 * uv - 1.0;
        material.worldPosition = inverse(getClipFromWorldMatrix()) * vec4(uv, 0.0, 1.0);;
    }
}

fragment {
    vec3 GammaToLinearSpace (vec3 sRGB)
    {
        return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);
    }

    float sRGB_to_linear(float color) {
    	return color <= 0.04045 ? color / 12.92 : pow((color + 0.055) / 1.055, 2.4);
    }

    vec3 GTLSpace (vec3 sRGB)
    {
        return vec3(sRGB_to_linear(sRGB.r), sRGB_to_linear(sRGB.g), sRGB_to_linear(sRGB.b));
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        vec2 uv = vec2(variable_pos.x, variable_pos.y);
        uv.y = 1.0 - uv.y;
        vec4 color = texture(materialParams_texture, uv);
        color.rgb = GTLSpace(color.rgb);

        material.baseColor = color;
        //material.baseColor  = vec4(0.3, 0.0, 0.0, 0.3);
    }
}
