material {
    name : fur_light,
    parameters : [
        {
           type : sampler2d,
           name : texture
        },
        {
           type : sampler2d,
           name : fur
        },
        {
            type : float,
            name : offset
        },
        {
            type : float,
            name : time
        },
        {
            type : float,
            name : furLength
        },
        {
            type : float,
            name : tming
        },
        {
            type : float,
            name : dming
        },
        {
            type : float,
            name : spacing
        },
        {
            type : float4,
            name : gravity
        },
        {
            type : float4,
            name : wind
        },
        {
            type : float4,
            name : shadowColor
        },
        {
            type : float,
            name : roughness
        },
        {
            type : float,
            name : reflectance
        },
        {
            type : float,
            name : anisotropy
        },
        {
            type : float3,
            name : anisotropyDirection
        },
        {
            type : float4,
            name : uvOffset
        },
        {
            type : float4,
            name : _BaseColor
        },
        {
            type : float4,
            name : _SubTexUV
        },
        {
            type : float3,
            name : SHL
        },
        {
            type : float4,
            name : _DirLightColor
        },
        {
            type : float3,
            name : _SPColor1
        },
        {
            type : float3,
            name : _SPColor2
        },
        {
            type : float,
            name : _specOff
        },
        {
            type : float4,
            name : shiftTexTilingOffset
        },
        {
            type : float,
            name : _FurDirLightExposure
        },
        {
            type : float,
            name : _LightFilter
        },
        {
            type : float,
            name : _FresnelLV
        },
        {
            type : float,
            name : _glossiness_1
        },
        {
            type : float,
            name : _glossiness_2
        },
        {
            type: bool,
            name: enableLight
        }
    ],
    requires : [
        uv0, tangents
    ],
    variables : [
        vertex
    ],
    shadingModel : lit,
    blending : transparent,
    postLightingBlending : multiply,
    flipUV:false
}

vertex {
    vec2 TRANSFORM_TEX(vec2 uv, vec4 tilingOffset){
        return uv * tilingOffset.xy + uv * tilingOffset.zw;
    }

    void materialVertex(inout MaterialVertexInputs material) {
        float FUR_OFFSET = materialParams.offset;

        float spacing = materialParams.furLength * 0.1;
        vec4 _Gravity = materialParams.gravity;
        vec4 _Wind = materialParams.wind;
        float4 _UVoffset = materialParams.uvOffset;
        float4 _SubTexUV = materialParams._SubTexUV;//float4(4.0, 8.0, 1.0, 0);
        float4 shiftTexTilingOffset = float4(1.0, 1.0, 0.0, 0.0);

        vec3 forceDirection = vec3(0.0, 0.0, 0.0);
        // Wind 低配可以去掉
        forceDirection.x = sin(materialParams.time * 1.5 * _Wind.x + material.worldPosition.x * 0.5*_Wind.z) * _Wind.w;
        forceDirection.y = cos(materialParams.time * 0.5 * _Wind.x + material.worldPosition.y * 0.4*_Wind.y) * _Wind.w;
        forceDirection.z = sin(materialParams.time * 0.7 * _Wind.x + material.worldPosition.y * 0.3*_Wind.y) * _Wind.w;

        // 顶点offset
        vec3 displacement = forceDirection + _Gravity.xyz; //顶点方向
        float displacementFactor = FUR_OFFSET * FUR_OFFSET;

        vec3 aNormal = material.worldNormal.xyz;
        aNormal.xyz += (displacement * displacementFactor * aNormal.z);
        vec3 n = aNormal * FUR_OFFSET * (spacing * saturate(1.0+_Gravity.w)); //spacing顶点色alpha通道控制毛发扩展长度

        vec4 wpos =  vec4(material.worldPosition.xyz + n.xyz, 1.0);
        material.worldPosition = wpos;

        // uv offuse
        vec2 uvoffset = _UVoffset.xy * FUR_OFFSET + (forceDirection.xy * _UVoffset.zw *FUR_OFFSET) ;
        uvoffset *=  0.1; // 尺寸太小不好调整 缩小精度。
        float2 flowmap = float2(_SubTexUV.w * FUR_OFFSET * 0.1); //flowmap

        vec2 uv1 = TRANSFORM_TEX(material.uv0, shiftTexTilingOffset) + (uvoffset + flowmap) * (float2(1.0, 1.0) / _SubTexUV.xy);
        vec2 uv2 = TRANSFORM_TEX(material.uv0, materialParams.shiftTexTilingOffset) *_SubTexUV.xy + uvoffset + flowmap;
        material.vertex = vec4(uv1, uv2);   // ???

    }
}

fragment {
    vec3 lerpv(vec3 a, vec3 b, float w) {
        return a + w * (b-a);
    }

    vec3 powv(vec3 color, float value){
        return vec3(pow(color.r, value), pow(color.g, value), pow(color.b, value));
    }

    float3 calculateLights(){
        float FUR_OFFSET = materialParams.offset;
        vec3 lightDir = frameUniforms.lightDirection;
        float4 _Color = materialParams.shadowColor;
        float _FresnelLV = materialParams._FresnelLV;//0.2;
        float _LightFilter = materialParams._LightFilter;//0.0;
        float _FurDirLightExposure = materialParams._FurDirLightExposure;//1.0;
        float _DirLightExposure = 1.0;
        float4 _DirLightColor = materialParams._DirLightColor;//float4(1.0, 1.0, 1.0, 1.0);
        mat3 tangentFrame = getWorldTangentFrame();
        float3 N = getWorldNormalVector();
        float3 T = tangentFrame[0];
        float3 BT = tangentFrame[1];

        float NoV = shading_NoV;
        float NoL = saturate(dot(shading_normal, lightDir));
        float Occlusion =FUR_OFFSET*FUR_OFFSET;
        //轮廓光------------------
        float RimLight = (1.0- NoV ) ;//*_FresnelLV ;
        RimLight *=Occlusion;
        RimLight *=RimLight+(1.0- NoV);
        RimLight *=_FresnelLV;

        //环境光------------------
        float3 SHL;//CalcEnvDiffuseBrdf(N);  //环境颜色 可以用单色替代
        SHL = materialParams.SHL;//float3(1.0, 1.0, 1.0);//SH(N);
        //SHL *= _SHExposure; //环境光转到线性空间 简易
        SHL = lerpv (SHL, _Color.rgb * SHL, 1.0 - Occlusion * _Color.a); //环境颜色与AO颜色
        SHL += SHL * RimLight;
        //平行光------------------
        float FurFilter =(materialParams.furLength * 0.5);
        float DirLight = saturate(NoL * (1.0 + _LightFilter) + _LightFilter*0.5 + Occlusion*FurFilter);//saturate(Occlusion *_LightFilter+(1-_LightFilter)*0.5);//丰富灯光细节
        //DirLight= saturate (DirLight);
        float3 diffuseSum =SHL + DirLight*_FurDirLightExposure* _DirLightExposure *_DirLightColor.rgb  ; //灯光与环境合并
        return diffuseSum;
    }

    float StrandSpecular(float3 T, float3 V, float3 L, float exponent){
        float3 H = normalize(V + L);
        float dotTH = dot(T, H);
        float sinTH = sqrt(1.0 - dotTH * dotTH);
        float dirAtten = smoothstep(-1.0, 0.0, dotTH);
        return dirAtten * pow(sinTH, exponent);
    }

    float3 calculateSpecular(){
        float FUR_OFFSET = materialParams.offset;
        vec3 L = frameUniforms.lightDirection;
        vec3 V = getWorldViewVector();
        float NoL = saturate(dot(shading_normal, L));
        float3 _SPColor1 = materialParams._SPColor1;//float3(1, 0, 0);
        float3 _SPColor2 = materialParams._SPColor2;//float3(0, 1, 0);
        float _glossiness_1 = materialParams._glossiness_1;//2.0;
        float _glossiness_2 = materialParams._glossiness_2;//55.0;
        float _specOff = materialParams._specOff;//0.0;

        mat3 tangentFrame = getWorldTangentFrame();
        float3 N = getWorldNormalVector();
        float3 T = tangentFrame[0];
        float3 BT = tangentFrame[1];

        //Sp_Anisotropy
        float2 Roughness = float2(_glossiness_1,_glossiness_2) ;
        float3 T1 = normalize(_specOff*N+BT);
        float SPec1 =StrandSpecular (T1,V,L,Roughness.x);//*FUR_OFFSET;
        float SPec2 =StrandSpecular (T1,V,L,Roughness.y) *FUR_OFFSET;
        float3 Specular = saturate(SPec1*_SPColor1 + SPec2*_SPColor2) *saturate(NoL);
        return Specular;
    }

    void material(inout MaterialInputs material) {

        float FUR_OFFSET = materialParams.offset;
        float4 shadowColor = materialParams.shadowColor;
        float FUR_OFFSET_SQ = FUR_OFFSET * FUR_OFFSET;

        prepareMaterial(material);

        float4 _BaseColor = materialParams._BaseColor;//float4(1.0, 1.0, 1.0, 1.0);
        float4 _SubTexUV = materialParams._SubTexUV;//float4(4.0, 8.0, 1.0, 0);


        //贴图计算
        float Noise = texture(materialParams_texture, variable_vertex.zw).r;
        vec4 color = texture(materialParams_fur, variable_vertex.xy);
        color.rgb *=_BaseColor.rgb;
        //color.rgb *= color.rgb;

        if (materialParams.enableLight) {
            float3 lights = calculateLights();
            float3 Specular = calculateSpecular();
            color.rgb =color.rgb * lights + Specular;
        }

        float vcolormask = saturate(color.a + _SubTexUV.z) ;

        color.rgb *= 1.0 + (1.0 - vcolormask);

        float furMask = 1.0 - materialParams.dming *  vcolormask ;
        float alpha = saturate((Noise*2.0 - (FUR_OFFSET_SQ + (FUR_OFFSET*furMask*5.0))) * materialParams.tming);
        alpha *= color.a;
        color.a = alpha;

        material.baseColor = color;

        material.anisotropy = 0.0;//materialParams.anisotropy;
        //material.roughness = materialParams.roughness;
        //material.metallic = 0.0;
        //material.reflectance = materialParams.reflectance;
        //material.clearCoat = 0.0;
        //material.clearCoatRoughness = 0.0;
        //material.anisotropyDirection = materialParams.anisotropyDirection;

        material.postLightingColor = vec4(alpha, alpha, alpha, 1);
    }
}