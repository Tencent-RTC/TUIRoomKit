material {
    name : bloom_blur,
    shadingModel : unlit,
    depthWrite: false,
    depthCulling: false,
    parameters : [
        {
            type : sampler2d,
            name : color
        },
        {
            type : float4[9],
            name : weights
        },
        {
            type : int,
            name : passIndex
        },
        {
            type : float,
            name : blurWeight
        }
    ],
    requires: [
        uv0
    ],
}
fragment {

    const int kGaussianSampleCount = 9;
    const float kReinhardWeight = 5.0;

    vec3 Tonemap_ReinhardWeighted(const vec3 x, float weight) {
        // Weighted Reinhard tone-mapping operator designed for post-processing
        // This tone-mapping operator is invertible
        return x * (weight / (max3(x) + 1.0));
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        float2 uv = uvToRenderTargetUV(getUV0());
        vec4 c = vec4(0);
        float blurWeight = materialParams.blurWeight;
        for (int i = 0; i < kGaussianSampleCount; i++) {
            float2 st = uv + materialParams.weights[i].yz * getResolution().zw;
            float weight = min(1.0, materialParams.weights[i].x + blurWeight);
            c += texture(materialParams_color, st) * weight;
        }
        material.baseColor = c;
    }
}
