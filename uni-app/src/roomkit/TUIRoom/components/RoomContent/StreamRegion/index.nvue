<template>
  <div
    v-if="playRegionDomId !== enlargeDomId"
    ref="streamRegionRef"
    :style="styleObject"
    :class="['user-stream-container', showVoiceBorder ? 'border' : '']"
  >
    <stream v-if="isPlayStream" :stream="props.stream" :layout="props.layout"></stream>
    <div
      v-if="!stream.hasVideoStream && !stream.hasScreenStream"
      class="center-user-info-container"
    >
      <div class="avatar-region">
        <Avatar :img-src="stream.avatarUrl"></Avatar>
      </div>
    </div>
    <div class="corner-user-info-container">
      <div v-if="showIcon" :class="showMasterIcon ? 'master-icon' : 'admin-icon' ">
        <svg-icon icon="UserIcon" size="20" color="#FFFFFF"></svg-icon>
      </div>
      <audio-icon
        v-if="!isScreenStream"
        class="audio-icon"
        :user-id="stream.userId"
        :is-muted="!stream.hasAudioStream"
        :audioVolume="audioVolume"
        size="small"
        color="#FFFFFF"
      ></audio-icon>
      <svg-icon v-if="isScreenStream" icon="ScreenOpenIcon" color="#FFFFFF"></svg-icon>
      <text class="user-name" :title="userInfo">{{ userInfo }}</text>
      <text v-if="isScreenStream" class="user-screen-info"> {{ t('is sharing their screen') }} </text>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, watch, nextTick, computed, onMounted } from 'vue';
import { StreamInfo, useRoomStore } from '../../../stores/room';
import Stream from './stream.nvue';
import Avatar from '../../common/Avatar.vue';
import { useBasicStore } from '../../../stores/basic';
import logger from '../../../utils/common/logger';
import { LAYOUT } from '../../../constants/render';
import AudioIcon from '../../common/AudioIcon.vue';
import SvgIcon from '../../common/base/SvgIcon.vue';
import { useI18n } from '../../../locales';
import {
  TUIVideoStreamType,
  TRTCVideoStreamType,
  TRTCVideoFillMode,
  TRTCVideoMirrorType,
  TRTCVideoRotation,
  TUIRole,
} from '@tencentcloud/tuiroom-engine-uniapp-app';
import useGetRoomEngine from '../../../hooks/useRoomEngine';
import { isInnerScene } from '../../../utils/constants';
import { storeToRefs } from 'pinia';
const roomEngine = useGetRoomEngine();

const logPrefix = '[StreamRegion]';
const basicStore = useBasicStore();
const roomStore = useRoomStore();

const { t } = useI18n();

interface Props {
  stream: StreamInfo;
  enlargeDomId?: string;
  userId?:string,
  styleObject: Object,
  audioVolume: number,
  isPlayStream: boolean,
  layout: LAYOUT,
}

const { layout } = storeToRefs(basicStore);

const props = defineProps<Props>();

const streamRegionRef = ref();
const showVoiceBorder = computed(() => (
  props.stream.hasAudioStream && props.audioVolume !== 0
));
const playRegionDomId = computed(() => `${props.stream.userId}${props.stream.streamType}`);

const showMasterIcon = computed(() => {
  const { streamType, userRole } = props.stream;
  return userRole === TUIRole.kRoomOwner && streamType === TUIVideoStreamType.kCameraStream;
});

const showAdminIcon = computed(() => {
  const { streamType, userRole } = props.stream;
  return userRole === TUIRole.kAdministrator
    && streamType === TUIVideoStreamType.kCameraStream;
});

const showIcon = computed(() => showMasterIcon.value || showAdminIcon.value);

const isScreenStream = computed(() => props.stream.streamType === TUIVideoStreamType.kScreenStream);

const userInfo = computed(() => {
  if (isInnerScene) {
    return `${props.stream.userName} | ${props.stream.userId}` || props.stream.userId;
  }
  return props.stream.userName || props.stream.userId;
});
</script>

<style lang="scss" scoped>
.user-stream-container {
  position: relative;
  border: 2px solid transparent;
  overflow: hidden;
  border-radius: 10px;
  display: flex;

  &.border {
    border: 2px solid #37E858;
  }

  .center-user-info-container {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #F2F2F2;
    .avatar-region {
      width: 130px;
      height: 130px;
      display: flex;
    }
    .user-info {
      width: 130px;
      text-align: center;
      .avatar-region {
        width: 130px;
        height: 130px;
        border-radius: 50%;
      }
      .user-gender-name {
        .user-name {
          margin-left: 6px;
          font-size: 14px;
          font-weight: 400;
          text-overflow: ellipsis;
          overflow: hidden;
        }
      }
    }
  }

  .corner-user-info-container {
    position: absolute;
    bottom: 4px;
    left: 0;
    flex: 1;
    overflow: hidden;
    height: 30px;
    display: flex;
    background: rgba(0,0,0,0.60);
    color: #FFFFFF;
    align-items: center;
    font-size: 14px;
    flex-direction: row;
    .user-name {
      margin-left: 8px;
      width: 60px;
      text-overflow: ellipsis;
      overflow: hidden;
      lines: 1;
      color: #FFFFFF;
    }
    .user-screen-info {
      padding-right: 5px;
      lines: 1;
      color: #FFFFFF;
    }
    .master-icon,
    .admin-icon {
      margin-left: 0;
      width: 32px;
      height: 32px;
      background-color: #1C66E5;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .admin-icon {
      background-color: #F06C4B;
    }
  }
}
</style>
